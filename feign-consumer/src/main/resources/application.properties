spring.application.name=feign-consumer
server.port=9001

# 实现日志的输出
logging.level.com.feign.service.HelloService = DEBUG
logging.level.com.feign.service.OtherService = DEBUG

eureka.client.serviceUrl.defaultZone=http://linzf:123456@10.6.71.94:1111/eureka/

# 开启GZIP的压缩功能以减少HTTP通信的消耗。
feign.compression.request.enabled=true;
feign.compression.response.enabled=true;
# 以下的请求的类型且请求数据的大小超过2048的将为会压缩传输。
feign.compression.request.mime-types=text/xml,application/xml,application/json
feign.compression.request.min-request-size=2048

# 设置全局的超时时间
ribbon.ReadTimeout = 1000

# 该参数用来开启重试机制，它默认是关闭的。
spring.cloud.loadbalancer.retry.enabled=true
# 请求连接的超时时间。
EUREKA-PRODUCER.ribbon.ConnectTimeout=250
# 请求处理的超时时间，该超时时间的影响层级大于全局的超时时间。
EUREKA-PRODUCER.ribbon.ReadTimeout=500
# 对所有操作请求都进行重试。
EUREKA-PRODUCER.ribbon.OkToRetryOnAllOperations=true
# 以下重试实现响应EUREKA-PRODUCER的最大次数是 ：（1 + MaxAutoRetries）* （1 + MaxAutoRetriesNextServer）
# 假设 MaxAutoRetries = 2 ，MaxAutoRetriesNextServer = 4 ，那么最大的重试次数为15次
# 切换实例的重试次数。
EUREKA-PRODUCER.ribbon.MaxAutoRetriesNextServer=1
# 对当前实例的重试次数。
EUREKA-PRODUCER.ribbon.MaxAutoRetries=1

feign.hystrix.enabled=true

# 这里需要注意一点， Ribbon的超时与Hystrix的超时是两个概念。 为了让上述的重试机制实现有效，我们需要让Hystrix的超时时间大于Ribbon的超时时间， 否则Hystrix命令超时后，该命令直接熔断， 重试机制就 没有任何意义了。
# Hystrix的全局的超时时间。
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=2000


